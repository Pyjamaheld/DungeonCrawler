<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var scoreText = "X" + string(global.total_coins);
var scale = 2;
var txt_x = 40;
var txt_y = 120;
var txt_color_main = c_black;
var txt_color_second = c_yellow;
var spr_w = 50;
var spr_h = 50;

draw_sprite_stretched(spr_coin, 0, txt_x - 40, txt_y - 10, spr_w, spr_h);
//draw_sprite(spr_coin, 0, txt_x - 35, txt_y - 2);
draw_text_transformed(txt_x, txt_y, scoreText, scale, scale, image_angle);
draw_text_transformed_colour(txt_x+2, txt_y, scoreText, scale, scale, image_angle, txt_color_main, txt_color_main, txt_color_main, txt_color_main, 1);
draw_text_transformed_colour(txt_x, txt_y+2, scoreText, scale, scale, image_angle, txt_color_main, txt_color_main, txt_color_main, txt_color_main, 1);
draw_text_transformed_colour(txt_x, txt_y, scoreText, scale, scale, image_angle, txt_color_second, txt_color_second, txt_color_second, txt_color_second, 1);

//EXP and Stats

//Level
var scoreText = "Player Level: " + string(global.player_level);
var scale = 2;
var txt_x = 10;
var txt_y = 10;
var txt_color_main = c_black;
var txt_color_second = c_white;

draw_text_transformed(txt_x, txt_y, scoreText, scale, scale, image_angle);
draw_text_transformed_colour(txt_x+2, txt_y, scoreText, scale, scale, image_angle, txt_color_main, txt_color_main, txt_color_main, txt_color_main, 1);
draw_text_transformed_colour(txt_x, txt_y+2, scoreText, scale, scale, image_angle, txt_color_main, txt_color_main, txt_color_main, txt_color_main, 1);
draw_text_transformed_colour(txt_x, txt_y, scoreText, scale, scale, image_angle, txt_color_second, txt_color_second, txt_color_second, txt_color_second, 1);


//EXP
var scoreText = "EXP: " + string(global.player_exp) + " / " + string(global.max_exp);
var scale = 2;
var txt_x = 400;
var txt_y = 10;
var txt_color_main = c_black;
var txt_color_second = c_purple;

draw_text_transformed(txt_x, txt_y, scoreText, scale, scale, image_angle);
draw_text_transformed_colour(txt_x+2, txt_y, scoreText, scale, scale, image_angle, txt_color_main, txt_color_main, txt_color_main, txt_color_main, 1);
draw_text_transformed_colour(txt_x, txt_y+2, scoreText, scale, scale, image_angle, txt_color_main, txt_color_main, txt_color_main, txt_color_main, 1);
draw_text_transformed_colour(txt_x, txt_y, scoreText, scale, scale, image_angle, txt_color_second, txt_color_second, txt_color_second, txt_color_second, 1);


//Min / Max DMG
var scoreText = "DMG: " + string(global.min_dmg) + " - " + string(global.max_dmg);
var scale = 2;
var txt_x = 10;
var txt_y = 60;
var txt_color_main = c_black;
var txt_color_second = c_red;

draw_text_transformed(txt_x, txt_y, scoreText, scale, scale, image_angle);
draw_text_transformed_colour(txt_x+2, txt_y, scoreText, scale, scale, image_angle, txt_color_main, txt_color_main, txt_color_main, txt_color_main, 1);
draw_text_transformed_colour(txt_x, txt_y+2, scoreText, scale, scale, image_angle, txt_color_main, txt_color_main, txt_color_main, txt_color_main, 1);
draw_text_transformed_colour(txt_x, txt_y, scoreText, scale, scale, image_angle, txt_color_second, txt_color_second, txt_color_second, txt_color_second, 1);    


//Get Text of Player State
var state_str;
switch(obj_player_new.state){
    case states_player.standing:
        state_str = "Standing";
    break;
    
    case states_player.running:
        state_str = "Running";
    break;
    
    case states_player.walking:
        state_str = "Walking";
    break;
    
    case states_player.ducking:
        state_str = "Ducking";
    break;
    
    case states_player.attack:
        state_str = "Attacking";
    break;
}


draw_set_colour(c_black);
draw_text ( 860, 130, "State: " + state_str);
draw_text ( 860, 150, "Jumping: " + string(obj_player_new.jumping));
draw_text ( 860, 170, "Falling: " + string(obj_player_new.falling));
draw_text ( 860, 190, "Hspd: " + string(obj_player_new.hspd));
draw_text ( 860, 210, "Vspd: " + string(obj_player_new.vspd));
draw_text ( 860, 230, "Dir: " + string(obj_player_new.dir));
draw_text ( 860, 260, "HP: " + string(obj_player_new.hp));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
